{"version":3,"sources":["photoReducer.js","App.js","registerServiceWorker.js","index.js"],"names":["initialState","photosPerLoad","visiblePhotos","upcomingPhotos","timesLoaded","startIndex","endIndex","ACTIONS","photoReducer","state","arguments","length","undefined","action","type","Object","objectSpread","payload","App","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","_useState","useState","_useState2","photosArr","setPhotosArr","useEffect","fetchPhotos","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data","wrap","_context","prev","next","fetch","sent","json","toJSX","t0","console","error","stop","apply","this","firstPhoto","lastPhoto","slice","map","photo","react_default","createElement","alt","filename","key","id","src","photoId","concat","Fragment","className","onClick","nextBatch","loadMorePhotos","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.00b15653.chunk.js","sourcesContent":["const PHOTOS_PER_LOAD = 10;\n\nexport const initialState = {\n  photosPerLoad: PHOTOS_PER_LOAD,\n  visiblePhotos: [],\n  upcomingPhotos: [],\n  timesLoaded: 0,\n  startIndex: 1 * PHOTOS_PER_LOAD,\n  endIndex: 2 * PHOTOS_PER_LOAD,\n};\n\nexport const ACTIONS = {\n  FETCHED_PHOTOS: \"FETCHED_PHOTOS\",\n  LOAD_PHOTOS: \"LOAD_PHOTOS\",\n};\n\nexport const photoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTIONS.FETCHED_PHOTOS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case ACTIONS.LOAD_PHOTOS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n    default:\n      return initialState;\n  }\n};\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport { ACTIONS, initialState, photoReducer } from \"./photoReducer\";\n\n// This URL can be combined with a photo id to fetch a photo.\nconst PHOTO_URL = (photoId) => `https://picsum.photos/id/${photoId}/200/200`;\n// This URL can be used to get an array of objects that contain information\n// about various photos.\nconst PHOTO_LIST_URL = \"https://picsum.photos/list\";\n\nexport const App = () => {\n  const [state, dispatch] = useReducer(photoReducer, initialState);\n  const [photosArr, setPhotosArr] = useState([]);\n\n  // Fetches photos on mount\n  useEffect(() => {\n    const fetchPhotos = async () => {\n      try {\n        const data = await (await fetch(PHOTO_LIST_URL)).json();\n        setPhotosArr(data);\n        dispatch({ type: ACTIONS.FETCHED_PHOTOS, payload: { visiblePhotos: toJSX(data, 0, state.photosPerLoad) } });\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    fetchPhotos();\n    return () => {\n      fetchPhotos();\n    };\n  }, [state.photosPerLoad]);\n\n  // returns JSX tags for each image in a givenlist of photos\n  const toJSX = (photosArr, firstPhoto, lastPhoto) => {\n    return photosArr.slice(firstPhoto, lastPhoto).map((photo) => <img alt={photo.filename} key={photo.id} src={PHOTO_URL(photo.id)} />);\n  };\n\n  // Handles loading new batch of photos to state when user requests more\n  const loadMorePhotos = (nextBatch) => {\n    const timesLoaded = state.timesLoaded + 1;\n    const startIndex = timesLoaded * state.photosPerLoad;\n    const endIndex = startIndex + state.photosPerLoad;\n    const upcomingPhotos = toJSX(photosArr, startIndex, endIndex);\n    const visiblePhotos = state.visiblePhotos.concat(upcomingPhotos);\n    dispatch({\n      type: ACTIONS.LOAD_PHOTOS,\n      payload: {\n        timesLoaded,\n        startIndex,\n        endIndex,\n        upcomingPhotos,\n        visiblePhotos,\n      },\n    });\n  };\n\n  return (\n    <>\n      <header>\n        <h1>Photo Wall</h1>\n      </header>\n      <div className=\"collage\">{state.visiblePhotos}</div>\n      <button onClick={() => loadMorePhotos(state.upcomingPhotos)}>Show me what you got</button>\n    </>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}